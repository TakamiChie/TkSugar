import tkinter
import unittest
from typing import Callable

import pyautogui

from tksugar import Generator, TkManager

class Test_Generator_command(unittest.TestCase):
  """
  Testing the `command` parameter of the`Generator#generate()` method.
  """

  def setUp(self) -> None:
    self.success = False
    return super().setUp()

  def tearDown(self):
    tkinter._default_root = None

  def passed(self):
    """
    Mark the test item success.
    Marks are removed at the beginning of the next test.

    In the test method, the value to be set can be changed by adding the value of `#success` before calling the `#passed()` method for the first time.
    number:`#passed()` The value is added to each time the method calls.
    array:`#passed()`True is added to the array each time the method is called.
    """
    if type(self.success) is int:
      self.success += 1;
    elif type(self.success) is list:
      self.success.append(True)
    else:
      self.success = True

  def do_test(self, file: str, test: Callable[[TkManager], None], command: Callable= None):
    """
    Display the GUI screen for testing.
    This method executes each test code after 100 milliseconds of GUI display.

    Parameters
    ----
    file: str
      YAML file that defines the GUI for testing.
    test: Callable[TkManager] -> None
      Test code, where the method is called 100 milliseconds after the GUI window is displayed.
      The TkManager generated by the generator is stored in the argument.
    command: Callable[] -> None
      Callback method to be called when the command is executed. None when omittedã€‚
    """
    def _do():
      if test is not None:
        test(man)
      man.window.after(500, lambda : man.window.destroy())
    man = Generator(file=file).get_manager(commandhandler=command)
    man.window.after(100, _do)
    man.mainloop()

  def test_button(self):
    """
    When the method is executed with the `command` parameter specified in `Generator#generator()` under the following conditions
    Confirm that the handler specified in `command` is executed.
    """
    def test(man: TkManager):
      pyautogui.press("tab")
      pyautogui.press("space")
    def command(obj, tag):
      self.passed()
    self.do_test("tests/definition/command_test/call_command.yml", command=command, test=test)
    self.assertTrue(self.success, "Command was not executed.")

if __name__ == "__main__":
  unittest.main()